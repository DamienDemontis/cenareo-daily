-- October Snippets: Core Programming (Complete Month 1-31)
INSERT INTO snippets (month, day, title, code, explanation, language_id, category_id) VALUES
(10, 1, 'C Memory Allocation', '#include <stdio.h>\n#include <stdlib.h>\nint main() {
    int *arr = malloc(5 * sizeof(int));
    if (!arr) {
        printf("Memory allocation failed!\\n");\n        return 1;\n    }\n    \n    for (int i = 0; i < 5; i++) {\n        arr[i] = i * 10;\n        printf("arr[%d] = %d\\n", i, arr[i]);\n    }\n    \n    free(arr);  // Always free allocated memory!\n    return 0;\n}', 'malloc() allocates memory dynamically. Always check if allocation succeeded. free() releases memory to prevent leaks. sizeof() gets type size.', 2, 5),
(10, 2, 'Python Lists', 'numbers = [1, 2, 3, 4, 5]\nprint(f"Original: {numbers}")\n\n# Add elements\nnumbers.append(6)\nnumbers.insert(0, 0)\n\n# Remove elements\nnumbers.remove(3)  # Remove first occurrence of 3\nlast = numbers.pop()  # Remove and return last\n\n# Slice\nfirst_three = numbers[:3]\nprint(f"Modified: {numbers}")\nprint(f"First three: {first_three}")\nprint(f"Length: {len(numbers)}")', 'Python lists are dynamic arrays. append() adds to end. insert() adds at position. remove() deletes by value. pop() removes and returns.', 1, 3),
(10, 3, 'C++ Basic Syntax', '#include <iostream>\n#include <string>\nusing namespace std;
\nint main() {
    string name;
    int age;
    \n    cout << "Enter name: ";\n    getline(cin, name);\n    \n    cout << "Enter age: ";\n    cin >> age;\n    \n    cout << "Hello " << name;\n    cout << ", you are " << age << " years old!" << endl;\n    \n    return 0;\n}', 'C++ extends C with objects. cout/cin for I/O. string type for text. getline() reads entire line. endl adds newline and flushes buffer.', 3, 1),
(10, 4, 'JavaScript Variables', '// Variable declarations\nvar oldWay = "global or function scope";
let modernWay = "block scope";
const constant = "cannot be reassigned";
\n// Data types\nlet number = 42;
let text = "Hello World";
let boolean = true;
let array = [1, 2, 3];
let object = {name: "Alice", age: 25};
\nconsole.log(typeof number);   // "number"\nconsole.log(typeof text);     // "string"\nconsole.log(typeof boolean);  // "boolean"', 'let and const preferred over var. JavaScript is dynamically typed. Objects use key-value pairs. typeof returns type as string. Arrays are special objects.', 5, 1),
(10, 5, 'C Structures', '#include <stdio.h>\n\nstruct Student {
    char name[50];
    int age;
    float gpa;
};
\nint main() {
    struct Student s1 = {"Alice", 20, 3.8};
    struct Student s2;
    \n    // Access with dot operator\n    printf("Name: %s\\n", s1.name);\n    printf("Age: %d\\n", s1.age);\n    printf("GPA: %.2f\\n", s1.gpa);\n    \n    // Assign values individually\n    strcpy(s2.name, "Bob");
    s2.age = 21;
    s2.gpa = 3.5;
    \n    return 0;
}', 'Structures group related data. Define with struct keyword. Access members with dot operator. Can initialize at declaration or assign later.', 2, 3),
(10, 6, 'Python Functions', 'def calculate_area(length, width, shape="rectangle"):\n    """Calculate area of rectangle or square"""\n    if shape == "square":\n        return length ** 2\n    else:\n        return length * width\n\n# Function calls\nrect_area = calculate_area(5, 3)\nsquare_area = calculate_area(4, 4, "square")\ndefault_area = calculate_area(6, 2)  # Uses default shape\n\nprint(f"Rectangle: {rect_area}")\nprint(f"Square: {square_area}")\nprint(f"Default: {default_area}")', 'Functions encapsulate reusable code. def keyword defines function. Parameters can have default values. Return value with return statement. Docstrings document functions.', 1, 1),
(10, 7, 'C++ Vectors', '#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;
\nint main() {
    vector<int> numbers = {3, 1, 4, 1, 5};
    \n    // Add elements\n    numbers.push_back(9);
    \n    // Sort\n    sort(numbers.begin(), numbers.end());
    \n    // Print all elements\n    for (int n : numbers) {
        cout << n << " ";\n    }\n    cout << endl;\n    \n    cout << "Size: " << numbers.size() << endl;\n    return 0;\n}', 'vector is dynamic array in C++. push_back() adds elements. sort() from <algorithm>. Range-based for loop iterates. size() returns element count.', 3, 3),
(10, 8, 'C Error Handling', '#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint divide(int a, int b, int *result) {
    if (b == 0) {
        return -1;  // Error code\n    }
    *result = a / b;
    return 0;  // Success\n}
\nint main() {
    FILE *file = fopen("data.txt", "r");
    if (!file) {
        printf("Error: %s\\n", strerror(errno));\n        return 1;\n    }\n    \n    int result;\n    if (divide(10, 0, &result) != 0) {\n        printf("Division by zero!\\n");\n    }\n    \n    fclose(file);\n    return 0;\n}', 'C uses return codes for errors. 0 typically success, non-zero error. errno global variable stores system error codes. strerror() converts to message.', 2, 5),
(10, 9, 'Python Dictionaries', 'student = {
    "name": "Alice",\n    "age": 20,\n    "courses": ["Math", "Physics", "CS"],\n    "gpa": 3.8\n}
\n# Access values\nprint(f"Name: {student[''name'']}")\nprint(f"Courses: {student[''courses'']}")\n\n# Add/modify\nstudent["email"] = "alice@epitech.eu"\nstudent["age"] = 21\n\n# Iterate\nfor key, value in student.items():\n    print(f"{key}: {value}")\n\n# Check existence\nif "email" in student:\n    print("Email found!")', 'Dictionaries store key-value pairs. Access with square brackets. items() returns key-value pairs. in operator checks key existence. Flexible data structure.', 1, 3),
(10, 10, 'C Function Pointers', 'int add(int a, int b) { return a + b; }
int multiply(int a, int b) { return a * b; }
\nint main() {
    // Declare function pointer\n    int (*operation)(int, int);
    \n    // Assign function\n    operation = add;
    printf("5 + 3 = %d\\n", operation(5, 3));\n    \n    operation = multiply;\n    printf("5 * 3 = %d\\n", operation(5, 3));\n    \n    // Array of function pointers\n    int (*ops[])(int, int) = {add, multiply};\n    printf("Using array: %d\\n", ops[0](10, 2));\n    \n    return 0;\n}', 'Function pointers store addresses of functions. Syntax: return_type (*name)(parameters). Enable callbacks and dynamic function calls. Arrays of function pointers possible.', 2, 9),
(10, 11, 'JavaScript Objects', 'const person = {
    firstName: "John",\n    lastName: "Doe",\n    age: 30,\n    \n    // Method\n    fullName: function() {
        return this.firstName + " " + this.lastName;
    },
    \n    // Arrow function (different ''this'' binding)\n    greet: () => {
        return "Hello from " + person.firstName;
    }
};
\nconsole.log(person.fullName());
console.log(person.greet());
\n// Add new property\nperson.email = "john@example.com";
console.log(person.email);', 'Objects contain properties and methods. this refers to object in regular functions. Arrow functions have lexical this. Properties can be added dynamically.', 5, 3),
(10, 12, 'C++ Classes Basic', '#include <iostream>\n#include <string>\nusing namespace std;
\nclass Rectangle {
private:\n    double width, height;
    \npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}
    \n    double area() {
        return width * height;
    }
    \n    void display() {
        cout << "Rectangle: " << width << "x" << height;\n        cout << ", Area: " << area() << endl;\n    }\n};\n\nint main() {\n    Rectangle rect(5.0, 3.0);\n    rect.display();\n    return 0;\n}', 'Classes encapsulate data and functions. private members hidden from outside. public members accessible. Constructor initializes object. Methods operate on data.', 3, 9),
(10, 13, 'C Arrays and Strings', '#include <stdio.h>\n#include <string.h>\n\nint main() {
    char str1[20] = "Hello";
    char str2[] = "World";
    char result[50];
    \n    // String operations\n    strcpy(result, str1);    // Copy\n    strcat(result, " ");     // Concatenate\n    strcat(result, str2);
    \n    printf("Result: %s\\n", result);\n    printf("Length: %zu\\n", strlen(result));\n    \n    // Compare strings\n    if (strcmp(str1, "Hello") == 0) {
        printf("Strings match!\\n");\n    }\n    \n    return 0;\n}', 'C strings are null-terminated char arrays. strcpy() copies, strcat() concatenates, strlen() gets length, strcmp() compares. Always ensure buffer sizes adequate.', 2, 3),
(10, 14, 'Python File Handling', '# Writing to file\nwith open("data.txt", "w") as file:\n    file.write("Hello, World!\\n")\n    file.write("Python file handling\\n")\n\n# Reading from file\nwith open("data.txt", "r") as file:\n    content = file.read()\n    print("Full content:", content)\n\n# Reading line by line\nwith open("data.txt", "r") as file:\n    for line_number, line in enumerate(file, 1):\n        print(f"Line {line_number}: {line.strip()}")\n\n# Append to file\nwith open("data.txt", "a") as file:\n    file.write("Appended line\\n")', 'with statement ensures file closure. "w" write mode, "r" read, "a" append. strip() removes whitespace. enumerate() adds line numbers. Always handle file operations safely.', 1, 5),
(10, 15, 'C Control Structures', '#include <stdio.h>\n\nint main() {
    int day = 3;
    \n    // Switch statement\n    switch (day) {
        case 1: printf("Monday\\n"); break;\n        case 2: printf("Tuesday\\n"); break;\n        case 3: printf("Wednesday\\n"); break;\n        case 4: printf("Thursday\\n"); break;\n        case 5: printf("Friday\\n"); break;\n        default: printf("Weekend\\n"); break;\n    }\n    \n    // Ternary operator\n    int age = 18;\n    printf("You are %s\\n", (age >= 18) ? "adult" : "minor");
    \n    return 0;
}', 'switch statement tests variable against multiple values. break prevents fall-through. default handles unmatched cases. Ternary operator (condition) ? true : false.', 2, 1),
(10, 16, 'JavaScript Functions', 'function greet(name, greeting = "Hello") {
    return `${greeting}, ${name}!`;
}
\n// Arrow function\nconst add = (a, b) => a + b;
\n// Function expression\nconst multiply = function(x, y) {
    return x * y;
};
\n// Higher-order function\nfunction calculate(operation, a, b) {
    return operation(a, b);
}
\nconsole.log(greet("Alice"));\nconsole.log(greet("Bob", "Hi"));\nconsole.log(calculate(add, 5, 3));\nconsole.log(calculate(multiply, 4, 2));', 'Functions are first-class objects. Default parameters provide fallback values. Arrow functions have concise syntax. Functions can be passed as arguments.', 5, 1),
(10, 17, 'C++ STL Containers', '#include <iostream>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\nusing namespace std;
\nint main() {
    vector<int> vec = {1, 2, 3};
    list<string> lst = {"a", "b", "c"};
    set<int> s = {3, 1, 2};  // Sorted, unique\n    map<string, int> m = {{"key1", 10}, {"key2", 20}};
    \n    cout << "Vector size: " << vec.size() << endl;\n    cout << "Set contains: ";\n    for (int x : s) cout << x << " ";\n    cout << endl;\n    \n    return 0;\n}', 'STL provides container classes. vector: dynamic array. list: doubly-linked list. set: sorted unique elements. map: key-value pairs. Choose based on use case.', 3, 3),
(10, 18, 'Python Classes', 'class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = 0\n    \n    def drive(self, distance):\n        self.mileage += distance\n        print(f"Drove {distance} km. Total: {self.mileage} km")\n    \n    def __str__(self):\n        return f"{self.year} {self.make} {self.model}"\n\n# Create instance\nmy_car = Car("Toyota", "Camry", 2020)\nprint(my_car)\nmy_car.drive(150)\nmy_car.drive(75)', '__init__ is constructor. self refers to instance. Methods operate on object data. __str__ defines string representation. Classes enable object-oriented programming.', 1, 9),
(10, 19, 'C Parameter Passing', 'void by_value(int x) { x = 10; }
void by_pointer(int* x) { *x = 10; }
void by_reference(int& x) { x = 10; }
\nint main() {
    int a = 5;
    by_value(a);     // a still 5\n    by_pointer(&a);  // a now 10\n    by_reference(a); // a now 10 (C++ only)\n    
    // Arrays always by pointer\n    void modify_array(int arr[], int size);
    int nums[5] = {1,2,3,4,5};
    modify_array(nums, 5);  // Modified\n}', 'C passes by value (copy). Pass pointer to modify original. C++ adds references. Arrays always passed as pointers. Understanding crucial for functions.', 2, 2),
(10, 20, 'C Conditional Compilation', '#ifdef DEBUG\n    #define LOG(x) printf("Debug: %s\\n", x)\n#else\n    #define LOG(x)\n#endif\n\nint main() {\n    LOG("Starting program");
    int result = calculate();
    LOG("Calculation done");
    #ifdef VERBOSE\n        printf("Result: %d\\n", result);\n    #endif\n    return 0;\n}', 'Preprocessor directives control compilation. #ifdef checks if defined. Different builds for debug/release. Zero overhead in production.', 2, 2),
(10, 21, 'Python Dictionary Methods', 'user = {"name": "Alice", "age": 25}
\n# Safe access\nage = user.get("age", 0)\nemail = user.get("email", "no@email.com")\n\n# Update multiple\nuser.update({"city": "Paris", "age": 26})\n\n# Pop with default\nold_age = user.pop("age", None)\n\n# Dictionary comprehension\nsquares = {x: x**2 for x in range(5)}
\n# Merge dicts (Python 3.9+)\nmerged = dict1 | dict2', 'Dictionary methods for safe manipulation. get() avoids KeyError. update() merges dicts. pop() removes and returns. Comprehensions create dicts efficiently.', 1, 3),
(10, 22, 'C Static Variables', '#include <stdio.h>\n\nvoid counter() {
    static int count = 0;  // Initialized once\n    count++;
    printf("Called %d times\\n", count);\n}\n\nint* dangerous() {\n    static int safe = 42;  // Survives function return\n    return &safe;  // OK - static storage\n}\n\nint main() {\n    counter();  // 1\n    counter();  // 2\n    counter();  // 3\n}', 'Static variables persist between calls. Initialized once. File scope limits visibility. Function scope maintains state. Not thread-safe by default.', 2, 2),
(10, 23, 'C++ Range-Based Loops', '#include <vector>\n#include <map>\n\nint main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    \n    // Read-only
    for (const auto& n : nums) {
        std::cout << n << " ";\n    }\n    \n    // Modify elements\n    for (auto& n : nums) {\n        n *= 2;\n    }\n    \n    // Map iteration\n    std::map<string, int> scores;\n    for (const auto& [name, score] : scores) {
        cout << name << ": " << score;\n    }\n}', 'Range-based for loops simplify iteration. auto deduces type. & avoids copies. const prevents modification. Structured bindings for pairs.', 3, 2),
(10, 24, 'JavaScript Array Methods', 'const nums = [1, 2, 3, 4, 5];
\n// Transform\nconst doubled = nums.map(x => x * 2);
\n// Filter\nconst evens = nums.filter(x => x % 2 === 0);
\n// Reduce\nconst sum = nums.reduce((acc, x) => acc + x, 0);
\n// Find\nconst found = nums.find(x => x > 3);
\n// Check conditions\nconst hasEven = nums.some(x => x % 2 === 0);
const allPositive = nums.every(x => x > 0);', 'Functional array methods avoid loops. map transforms, filter selects, reduce aggregates. Immutable operations. Chain for complex transformations.', 5, 3),
(10, 25, 'C Bit Manipulation', '#include <stdio.h>\n\n// Set bit n\n#define SET_BIT(x, n) ((x) |= (1 << (n)))\n// Clear bit n  \n#define CLEAR_BIT(x, n) ((x) &= ~(1 << (n)))\n// Toggle bit n\n#define TOGGLE_BIT(x, n) ((x) ^= (1 << (n)))\n// Check bit n\n#define CHECK_BIT(x, n) (((x) >> (n)) & 1)\n\nint main() {
    unsigned char flags = 0;
    SET_BIT(flags, 2);    // Set bit 2\n    if (CHECK_BIT(flags, 2)) {
        printf("Bit 2 is set\\n");\n    }\n}', 'Bit operations for flags and optimization. OR sets bits, AND clears, XOR toggles. Shift for positioning. Efficient space usage.', 2, 4),
(10, 26, 'Python List Slicing', 'nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Basic slicing\nfirst_three = nums[:3]      # [0, 1, 2]\nlast_three = nums[-3:]      # [7, 8, 9]\nmiddle = nums[3:7]          # [3, 4, 5, 6]

# Step parameter\nevens = nums[::2]           # [0, 2, 4, 6, 8]\nreversed = nums[::-1]       # [9, 8, 7, ...]\n\n# Copy list\ncopy = nums[:]              # Full copy\n\n# Assign slice\nnums[2:5] = [20, 30, 40]   # Replace elements', 'Slicing extracts subsequences. [start:stop:step] syntax. Negative indices from end. Omit for defaults. Creates new list (shallow copy).', 1, 3),
(10, 27, 'C File Handling Errors', '#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint main() {
    FILE* file = fopen("data.txt", "r");
    if (!file) {
        fprintf(stderr, "Error opening file: %s\\n", strerror(errno));\n        return 1;\n    }\n    \n    char buffer[256];\n    if (!fgets(buffer, sizeof(buffer), file)) {\n        if (feof(file)) {\n            printf("End of file\\n");\n        } else if (ferror(file)) {\n            perror("Read error");
        }
    }
    fclose(file);
}', 'Always check file operations. errno provides error codes. strerror() gets descriptions. feof() vs ferror() for read failures. Clean up resources.', 2, 5),
(10, 28, 'C++ STL Algorithms', '#include <algorithm>\n#include <vector>\n#include <numeric>\n\nint main() {
    std::vector<int> v = {3, 1, 4, 1, 5, 9};
    \n    std::sort(v.begin(), v.end());
    \n    auto it = std::find(v.begin(), v.end(), 4);
    \n    int sum = std::accumulate(v.begin(), v.end(), 0);
    \n    std::reverse(v.begin(), v.end());
    \n    bool has_nine = std::any_of(v.begin(), v.end(),\n                                [](int x) { return x == 9; });
}', 'STL algorithms work on iterators. sort, find, accumulate common operations. Lambda expressions for predicates. Header <algorithm> required.', 3, 3),
(10, 29, 'Git Basics', '# Initialize repository\ngit init\n\n# Stage changes\ngit add file.txt\ngit add -A  # All files\n\n# Commit\ngit commit -m "Add feature"\n\n# View history\ngit log --oneline\n\n# Create branch\ngit checkout -b feature\n\n# Merge\ngit checkout main\ngit merge feature\n\n# Push to remote\ngit push origin main', 'Git tracks code changes. add stages, commit saves snapshot. Branches isolate features. Merge combines work. Essential for collaboration.', 14, 7),
(10, 30, 'C Memory Alignment', '#include <stddef.h>\n\nstruct Packed {
    char a;     // 1 byte\n    int b;      // 4 bytes\n    char c;     // 1 byte\n} __attribute__((packed));
\nstruct Aligned {
    char a;     // 1 byte + 3 padding
    int b;      // 4 bytes\n    char c;     // 1 byte + 3 padding\n};  // Total: 12 bytes\n\nint main() {
    printf("Packed: %zu\\n", sizeof(struct Packed));   // 6\n    printf("Aligned: %zu\\n", sizeof(struct Aligned)); // 12\n}', 'CPU accesses aligned data faster. Compiler adds padding. packed attribute removes padding. Trade-off: space vs speed. Important for network protocols.', 2, 4),
(10, 31, 'Halloween Special: Spooky Code', '#include <stdio.h>\n#include <time.h>\n\nint main() {
    srand(time(NULL));
    char* spooky[] = {"👻", "🎃", "🦇", "🕷️", "💀"};
    char* messages[] = {
        "Segmentation fault... or is it?",\n        "Undefined behavior lurks here",\n        "Memory leak detected... *evil laugh*",\n        "// TODO: Fix before midnight"\n    };
    \n    printf("%s %s\\n", spooky[rand()%5], messages[rand()%4]);\n    printf("Happy Halloween from Epitech Nancy!\\n");\n    return 0x1F383;  // 🎃 in hex\n}', 'Halloween fun with code! Random spooky messages. Unicode emojis in strings. Hexadecimal return for pumpkin. Remember: real bugs are scarier!', 2, 10);