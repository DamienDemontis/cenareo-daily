-- September Snippets: Welcome & Fundamentals (Complete Month)
INSERT INTO snippets (month, day, title, code, explanation, language_id, category_id) VALUES
(9, 1, 'Welcome to Programming', '#include <stdio.h>\nint main() {
    printf("Welcome to Epitech Nancy!\\n");\n    printf("Starting your coding journey\\n");\n    return 0;\n}', 'First program of the year! printf() outputs text. Every C program needs main() function. return 0 indicates successful execution.', 2, 1),
(9, 2, 'Variables Declaration', 'name = "Student"\nage = 19\nheight = 1.75\nis_student = True\n\nprint(f"Name: {name}")\nprint(f"Age: {age} years")\nprint(f"Height: {height}m")\nprint(f"Student: {is_student}")', 'Python variables store different data types. No declaration needed. f-strings format output with {}. Dynamic typing automatically detects type.', 1, 1),
(9, 3, 'C Data Types', '#include <stdio.h>\nint main() {
    int count = 42;
    float price = 9.99;
    char letter = ''A'';
    \n    printf("Count: %d\\n", count);\n    printf("Price: %.2f\\n", price);\n    printf("Letter: %c\\n", letter);\n    \n    return 0;\n}', 'C has strict data types. int for whole numbers, float for decimals, char for single characters. Format: %d, %f, %c respectively.', 2, 1),
(9, 4, 'First C++ Program', '#include <iostream>\nusing namespace std;
\nint main() {
    cout << "Hello from C++!" << endl;\n    cout << "C++ uses streams for I/O" << endl;\n    return 0;\n}', 'C++ uses iostream for input/output. cout sends data to console. << is stream insertion operator. endl adds newline and flushes buffer.', 3, 1),
(9, 5, 'Basic Shell Commands', '#!/bin/bash\n# Navigate filesystem\nls -la          # List files with details\ncd Documents    # Change directory
pwd             # Show current path
mkdir projects  # Create directory\ncp file.txt backup.txt  # Copy file
mv old.txt new.txt     # Move/rename', 'Essential shell commands for file management. ls lists, cd changes directory, pwd shows location, mkdir creates folders, cp/mv for files.', 5, 4),
(9, 6, 'C Input with scanf', '#include <stdio.h>\nint main() {
    int number;
    char name[30];
    \n    printf("Enter a number: ");\n    scanf("%d", &number);
    \n    printf("Enter your name: ");\n    scanf("%s", name);
    \n    printf("Hello %s, your number is %d\\n", name, number);\n    return 0;\n}', 'scanf() reads formatted input from user. & gets variable address for int, arrays dont need & as they are addresses already.', 2, 1),
(9, 7, 'Python Lists Basics', 'numbers = [1, 2, 3, 4, 5]\nnames = ["Alice", "Bob", "Charlie"]\n\n# Accessing elements\nprint(f"First number: {numbers[0]}")\nprint(f"Last name: {names[-1]}")\n\n# Adding elements\nnumbers.append(6)\nnames.insert(0, "David")\n\nprint(f"Updated numbers: {numbers}")\nprint(f"Updated names: {names}")', 'Python lists store multiple items. Index starts at 0, -1 for last. append() adds to end, insert() adds at position. Very flexible data structure.', 1, 2),
(9, 8, 'C Arithmetic Operations', '#include <stdio.h>\nint main() {
    int a = 10, b = 3;
    \n    printf("Addition: %d + %d = %d\\n", a, b, a + b);\n    printf("Subtraction: %d - %d = %d\\n", a, b, a - b);\n    printf("Multiplication: %d * %d = %d\\n", a, b, a * b);\n    printf("Division: %d / %d = %d\\n", a, b, a / b);\n    printf("Modulo: %d %% %d = %d\\n", a, b, a % b);\n    \n    return 0;\n}', 'Basic arithmetic in C: +, -, *, / for math operations. % (modulo) gives remainder. Integer division truncates decimals.', 2, 1),
(9, 9, 'C++ cin Input', '#include <iostream>\n#include <string>\nusing namespace std;
\nint main() {
    string name;
    int age;
    \n    cout << "Enter your name: ";\n    getline(cin, name);  // For strings with spaces\n    \n    cout << "Enter your age: ";\n    cin >> age;\n    \n    cout << "Hello " << name << ", you are " << age << " years old!" << endl;\n    return 0;\n}', 'C++ uses cin for input with >> operator. getline() reads entire line including spaces. string type handles text automatically.', 3, 1),
(9, 10, 'Git Version Control', '# Initialize repository\ngit init\n\n# Add files to staging\ngit add .\ngit add file.c\n\n# Commit changes\ngit commit -m "Initial commit"\n\n# Check status\ngit status\ngit log --oneline', 'Git tracks code changes. init starts repository, add stages files, commit saves changes with message. Essential for teamwork and backups.', 5, 4),
(9, 11, 'C Boolean Logic', '#include <stdio.h>\nint main() {
    int score = 85;
    int attendance = 90;
    \n    if (score >= 60 && attendance >= 80) {
        printf("Pass: Good score AND attendance\\n");\n    }\n    \n    if (score >= 90 || attendance >= 95) {\n        printf("Excellent: High score OR attendance\\n");\n    }\n    \n    printf("Not failing: %s\\n", (score < 60) ? "false" : "true");
    return 0;
}', 'Logical operators: && (AND), || (OR), ! (NOT). Ternary operator ?: is shorthand if-else. Both conditions must be true for &&.', 2, 1),
(9, 12, 'Python Functions', 'def calculate_area(length, width):\n    """Calculate rectangle area"""\n    area = length * width\n    return area\n\ndef greet_user(name, age=18):\n    """Greet user with optional age"""\n    return f"Hello {name}, age {age}!"\n\n# Function calls\nresult = calculate_area(5, 3)\nprint(f"Area: {result}")\nprint(greet_user("Alice"))\nprint(greet_user("Bob", 25))', 'Functions organize code. def keyword defines, docstrings document. Default parameters make arguments optional. return sends values back.', 1, 1),
(9, 13, 'C Constants and Macros', '#include <stdio.h>\n#define PI 3.14159\n#define MAX_SIZE 100\n\nint main() {
    const int days_in_week = 7;
    const float gravity = 9.81;
    \n    printf("PI value: %.5f\\n", PI);\n    printf("Circle area (r=5): %.2f\\n", PI * 5 * 5);
    printf("Days in week: %d\\n", days_in_week);\n    printf("Max array size: %d\\n", MAX_SIZE);\n    \n    return 0;\n}', '#define creates macros (text replacement). const creates read-only variables. Constants improve code readability and maintenance.', 2, 1),
(9, 14, 'C++ Classes Introduction', '#include <iostream>\nusing namespace std;
\nclass Student {
public:\n    string name;
    int age;
    \n    void introduce() {
        cout << "Hi, I am " << name << ", " << age << " years old." << endl;\n    }\n};\n\nint main() {\n    Student s1;\n    s1.name = "Alice";
    s1.age = 20;
    s1.introduce();
    return 0;
}', 'Classes group data and functions together. public: means accessible outside class. Objects are instances of classes. . accesses members.', 3, 2),
(9, 15, 'HTML Document Structure', '<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>My First Page</title>\n</head>\n<body>\n    <h1>Welcome to Web Development</h1>\n    <p>This is a paragraph with <strong>bold</strong> text.</p>\n    <ul>\n        <li>HTML structures content</li>\n        <li>CSS styles appearance</li>\n        <li>JavaScript adds interactivity</li>\n    </ul>\n</body>\n</html>', 'HTML creates web page structure. DOCTYPE declares HTML5. head contains metadata, body contains visible content. Tags define elements.', 6, 5),
(9, 16, 'C Character Arrays', '#include <stdio.h>\n#include <string.h>\nint main() {
    char greeting[20] = "Hello";
    char name[20];
    \n    strcpy(name, "World");
    strcat(greeting, " ");
    strcat(greeting, name);
    \n    printf("Message: %s\\n", greeting);\n    printf("Length: %zu characters\\n", strlen(greeting));\n    \n    return 0;\n}', 'C strings are character arrays ending with \\0. strcpy copies, strcat joins strings. Always ensure array is large enough to prevent overflow.', 2, 3),
(9, 17, 'Python Conditionals', 'temperature = 22\nweather = "sunny"\n\nif temperature > 25 and weather == "sunny":\n    print("Perfect beach weather!")\nelif temperature > 20:\n    print("Nice day for a walk")\nelif temperature > 10:\n    print("Need a light jacket")\nelse:\n    print("Stay warm inside")\n\n# Compact conditional\nclothing = "shorts" if temperature > 20 else "pants"\nprint(f"Wear: {clothing}")', 'Python if-elif-else chain for multiple conditions. and/or for logic. Compact conditional assigns based on condition. == tests equality.', 1, 1),
(9, 18, 'C For Loops', '#include <stdio.h>\nint main() {
    // Basic counting\n    for (int i = 1; i <= 5; i++) {
        printf("Count: %d\\n", i);\n    }\n    \n    // Array processing\n    int numbers[] = {10, 20, 30, 40};\n    int sum = 0;\n    \n    for (int i = 0; i < 4; i++) {\n        sum += numbers[i];\n    }\n    \n    printf("Sum: %d\\n", sum);\n    return 0;\n}', 'for loops have initialization, condition, increment. Perfect for counting and array processing. i++ increments counter each iteration.', 2, 1),
(9, 19, 'CSS Styling Basics', 'body {
    font-family: Arial, sans-serif;
    margin: 20px;
    background-color: #f0f0f0;
}
\nh1 {
    color: #2c3e50;
    text-align: center;
    border-bottom: 2px solid #3498db;
}
\n.highlight {
    background-color: yellow;
    padding: 5px;
    border-radius: 3px;
}
\n#main-content {
    max-width: 800px;
    margin: 0 auto;
}', 'CSS styles HTML elements. Selectors target elements: tag names, .class, #id. Properties change appearance: color, fonts, spacing, layout.', 7, 5),
(9, 20, 'C While Loops', '#include <stdio.h>\nint main() {
    int number = 16;
    int count = 0;
    \n    // Count digits\n    int temp = number;
    while (temp > 0) {
        temp /= 10;
        count++;
    }
    \n    printf("Number %d has %d digits\\n", number, count);\n    \n    // Simple menu\n    char choice = ''y'';\n    while (choice == ''y'') {\n        printf("Continue? (y/n): ");
        scanf(" %c", &choice);
    }
    \n    return 0;
}', 'while loops continue while condition is true. Useful when iteration count is unknown. Be careful to avoid infinite loops by updating condition.', 2, 1),
(9, 21, 'JavaScript Basics', 'let name = "Student";
const school = "Epitech Nancy";
let age = 20;
\n// Function declaration\nfunction greetStudent(studentName, studentAge) {
    return `Hello ${studentName}! Welcome to ${school}. You are ${studentAge} years old.`;
}
\n// Arrow function\nconst calculateGrade = (score) => {
    if (score >= 90) return "A";
    if (score >= 80) return "B"; 
    return "C";
};
\nconsole.log(greetStudent(name, age));
console.log(`Grade: ${calculateGrade(85)}`);', 'JavaScript variables: let (changeable), const (fixed). Template literals use backticks and ${}. Functions can be declared or arrow syntax.', 4, 1),
(9, 22, 'Hello World in C', '#include <stdio.h>\nint main() {
    printf("Hello, Epitech Nancy!\\n");\n    return 0;\n}', 'Your first C program! printf() displays text to console. #include adds header files. main() is program entry point. return 0 means success.', 2, 1),
(9, 23, 'Variables and Types', '#include <stdio.h>\nint main() {
    int age = 20;
    float height = 1.75;
    char grade = ''A'';
    char name[] = "Student";
    \n    printf("Name: %s\\n", name);\n    printf("Age: %d years\\n", age);\n    printf("Height: %.2f meters\\n", height);\n    printf("Grade: %c\\n", grade);\n    \n    return 0;\n}', 'C basic data types: int (numbers), float (decimals), char (single character), arrays for strings. Format specifiers: %d, %f, %c, %s.', 2, 1),
(9, 24, 'Conditional Statements', '#include <stdio.h>\nint main() {
    int score = 85;
    \n    if (score >= 90) {
        printf("Excellent!\\n");\n    } else if (score >= 70) {\n        printf("Good job!\\n");\n    } else if (score >= 50) {\n        printf("Pass\\n");\n    } else {\n        printf("Need improvement\\n");\n    }\n    \n    return 0;\n}', 'if-else statements control program flow. Comparison operators: >=, <=, ==, !=. Logical operators: && (and), || (or), ! (not). Braces group statements.', 2, 1),
(9, 25, 'Loops in C', '#include <stdio.h>\nint main() {
    // For loop\n    for (int i = 1; i <= 5; i++) {
        printf("Count: %d\\n", i);\n    }\n    \n    // While loop\n    int j = 10;\n    while (j > 0) {\n        printf("Countdown: %d\\n", j);\n        j--;\n    }\n    \n    return 0;\n}', 'Loops repeat code blocks. for loop has init, condition, increment. while loop continues while condition true. i++ increments, j-- decrements.', 2, 1),
(9, 26, 'Arrays Basics', '#include <stdio.h>\nint main() {
    int numbers[5] = {10, 20, 30, 40, 50};
    int sum = 0;
    
    // Calculate sum\n    for (int i = 0; i < 5; i++) {
        sum += numbers[i];
    }
    \n    printf("Numbers: ");\n    for (int i = 0; i < 5; i++) {\n        printf("%d ", numbers[i]);\n    }\n    printf("\\nSum: %d\\n", sum);\n    \n    return 0;\n}', 'Arrays store multiple values of same type. Index starts at 0. numbers[i] accesses element at position i. Use loops to process all elements.', 2, 1),
(9, 27, 'Functions Introduction', '#include <stdio.h>\n\nint add(int a, int b) {
    return a + b;
}
\nvoid greet(char name[]) {
    printf("Hello, %s!\\n", name);\n}\n\nint main() {\n    int result = add(5, 3);\n    printf("5 + 3 = %d\\n", result);\n    \n    greet("Epitech");
    \n    return 0;
}', 'Functions organize code into reusable blocks. Parameters pass data in. return sends data back. void means no return value. Declare before use.', 2, 1),
(9, 28, 'Pointers Basics', '#include <stdio.h>\nint main() {
    int number = 42;
    int *pointer = &number;
    \n    printf("Value: %d\\n", number);\n    printf("Address: %p\\n", &number);\n    printf("Pointer points to: %p\\n", pointer);\n    printf("Value via pointer: %d\\n", *pointer);\n    \n    *pointer = 100;  // Change value through pointer\n    printf("New value: %d\\n", number);\n    \n    return 0;\n}', 'Pointers store memory addresses. & gets address of variable. * dereferences (gets value at address). Powerful but requires careful handling.', 2, 2),
(9, 29, 'String Operations', '#include <stdio.h>\n#include <string.h>\nint main() {
    char str1[20] = "Hello";
    char str2[] = " World";
    char str3[20];
    \n    // Copy string\n    strcpy(str3, str1);
    \n    // Concatenate\n    strcat(str1, str2);
    
    printf("Combined: %s\\n", str1);\n    printf("Length: %zu\\n", strlen(str1));\n    printf("Copy: %s\\n", str3);\n    \n    return 0;\n}', 'C strings are character arrays ending with \\0. strcpy() copies, strcat() concatenates, strlen() gets length. Always ensure buffer size adequate.', 2, 3),
(9, 30, 'Basic Input/Output', '#include <stdio.h>\nint main() {
    char name[50];
    int age;
    float height;
    \n    printf("Enter your name: ");\n    fgets(name, sizeof(name), stdin);\n    \n    printf("Enter your age: ");\n    scanf("%d", &age);
    \n    printf("Enter your height (m): ");
    scanf("%f", &height);
    \n    printf("\\nProfile:\\n");\n    printf("Name: %s", name);\n    printf("Age: %d years\\n", age);\n    printf("Height: %.2f meters\\n", height);\n    \n    return 0;\n}', 'scanf() reads formatted input. fgets() safely reads strings. & required for scanf() with variables. Always validate user input in real programs.', 2, 1);